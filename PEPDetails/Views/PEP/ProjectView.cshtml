@model PEPDetails.Models.ProjectDetailViewModel
@{
    ViewData["Title"] = "Project Details";
}

<div class="row">
    <div class="col-5 col-xl-4" id="project-contact">
        <h3>@Html.DisplayFor(p => p.ProjectDetail.Cmim.ClientName)</h3>
        <h4>@Html.DisplayFor(p => p.ProjectDetail.Cmim.ClientMatterId) @Html.DisplayFor(p => p.ProjectDetail.Cmim.MatterName)</h4>
        <div id="contact-box" class="media mt-3">
            <div class="align-self-center mr-4 contact-icon d-none d-lg-block">
                <span class="far fa-user fa-3x ml-1"></span>
                <div class="text-center">Contact</div>
            </div>
            <div class="media-body">
                <div class="row align-items-top">
                    <div class="col">
                        <h6 class="media-heading">@(String.Format("{0}{1}", String.IsNullOrEmpty(Model.ProjectDetail.Cmim.ContactLastName) ? "" : Model.ProjectDetail.Cmim.ContactLastName + ", ", Model.ProjectDetail.Cmim.ContactFirstName))</h6>
                    </div>
                </div>
                <div class="row align-items-center">
                    <div class="col">
                        <div>@Html.DisplayFor(p => p.ProjectDetail.Cmim.ContactAddressLine1)</div>
                        <div>@Html.DisplayFor(p => p.ProjectDetail.Cmim.ContactAddressLine2)</div>
                        <div>@(String.Format("{0}{1} {2}", String.IsNullOrEmpty(Model.ProjectDetail.Cmim.ContactAddressCity) ? "" : Model.ProjectDetail.Cmim.ContactAddressCity + ", ", Model.ProjectDetail.Cmim.ContactAddressState, Model.ProjectDetail.Cmim.ContactAddressPostalCode))</div>
                    </div>
                </div>
                <div class="row align-items-end">
                    <div class="col">
                        <div>@Html.DisplayFor(p => p.ProjectDetail.Cmim.ContactPhone)</div>
                        <div><a href="mailto:@(Model.ProjectDetail.Cmim.ContactEmail)">@Html.DisplayFor(p => p.ProjectDetail.Cmim.ContactEmail)</a></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-3 col-xl-4" id="project-atty">
        <div id="responsible-atty" class="mb-2">
            <span class="small">Responsible Attorney</span>
            <div class="media">
                <img class="mr-2 align-self-center d-none d-xl-block" src="@Html.DisplayFor(p => p.ResponsibleAttyImageURL)" height="90" width="75" />
                <div class="media-body">
                    <h6 class="media-heading mb-3">@Html.DisplayFor(p => p.ProjectDetail.ResponsibleAtty.FullName)</h6>
                    <p class="mb-0">
                        <i class="fas fa-phone mr-2 d-none d-xl-inline" data-fa-transform="flip-h"></i>@Html.DisplayFor(p => p.ProjectDetail.ResponsibleAtty.Phone)<br />
                        <i class="far fa-envelope mr-2 d-none d-xl-inline"></i><a href="mailto:@Html.DisplayFor(p => p.ProjectDetail.ResponsibleAtty.Email)">@Html.DisplayFor(p => p.ProjectDetail.ResponsibleAtty.Email)</a>
                    </p>
                </div>
            </div>
        </div>
        <div id="billing-atty">
            <span class="small">Billing Attorney</span>
            <div class="media">
                <img class="mr-2 align-self-center d-none d-xl-block" src="@Html.DisplayFor(p => p.BillingAttyImageURL)" height="90" width="75" />
                <div class="media-body">
                    <h6 class="media-heading mb-3">@Html.DisplayFor(p => p.ProjectDetail.BillingAtty.FullName)</h6>
                    <p class="mb-0">
                        <i class="fas fa-phone mr-2 d-none d-xl-inline" data-fa-transform="flip-h"></i>@Html.DisplayFor(p => p.ProjectDetail.BillingAtty.Phone)<br />
                        <i class="far fa-envelope mr-2 d-none d-xl-inline"></i><a href="mailto:@Html.DisplayFor(p => p.ProjectDetail.BillingAtty.Email)">@Html.DisplayFor(p => p.ProjectDetail.BillingAtty.Email)</a>
                    </p>
                </div>
            </div>
        </div>
    </div>
    <div class="col-4 col-xl-4 align-self-center" id="project-billing">
        <div class="row">
            <div id="billing-chart" class="col-0 col-lg-4 col-xl-5 d-none d-lg-block align-self-center">
                <canvas id="mychart" height="100%" width="100%"></canvas>
            </div>
            <div id="billing-details" class="col-12 col-lg-8 col-xl-7">
                <table cellpadding="2" width="100%">
                    <tr>
                        <td>Quote</td>
                        <td><input asp-for="ProjectDetail.Billing.Quote" asp-format="{0:C}" name="quote" id="quote-text" class="ml-3" /></td>
                    </tr>
                    <tr>
                        <td>Billed</td>
                        <td id="pep-billed">@(String.Format("{0:c}", Model.BilledAmount))</td>
                    </tr>
                    <tr>
                        <td>Unbilled</td>
                        <td>@(String.Format("{0:c}", Model.ProjectDetail.Billing.UnbilledTotal))</td>
                    </tr>
                    <tr>
                        <td>Project Total</td>
                        <td id="pep-total">@(String.Format("{0:c}", Model.ProjectDetail.Billing.UnbilledTotal + Model.BilledAmount))</td>
                    </tr>
                    <tr>
                        <td>Last Billing</td>
                        <td>@(Model.ProjectDetail.Billing.LastBillDate.HasValue ? Model.ProjectDetail.Billing.LastBillDate.Value.ToString("d") : "none")</td>
                    </tr>
                    <tr>
                        <td colspan="2"><a class="btn btn-info mj-secondary btn-sm btn-block mt-3" href="https://mjsc.rippe.com/LMS/action/inquiry/time?client=@(Model.ProjectDetail.Cmim.ClientId)&matter=@(Model.ProjectDetail.Cmim.MatterId)" target="_blank">LMS+</a></td>
                    </tr>
                    <tr>
                        <td colspan="2"><div class="btn btn-info mj-secondary btn-sm btn-block mt-1" data-toggle="modal" data-target="#pop-docs">DMS</div></td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div id="project-tasks" class="col-12 col-lg-7">
        <div class="project-header">
            <div class="row">
                <div class="col-3">
                    <h5>Project Tasks</h5>
                </div>
                <div class="col align-self-center ml-3 mr-2">
                    <h5 class="text-right mr-2">Project Completed</h5>
                </div>
            </div>
        </div>
        <div class="row">
            <div id="project-dates" class="col-3">
                <table>
                    <tr><td class="small text-center">Project Type</td></tr>
                    <tr><td><input asp-for="ProjectDetail.ProjectType.Name" name="typeId" readonly class="form-control text-center" /></td></tr>
                    <tr><td class="small text-center">Project Start</td></tr>
                    <tr><td><input asp-for="ProjectDetail.ProjectStartDate" asp-format="{0:MM/dd/yyyy}" type="text" name="start" id="project-start-date-picker" readonly class="form-control text-center" /></td></tr>
                    <tr><td class="small text-center">Initial Meeting</td></tr>
                    <tr><td><input asp-for="ProjectDetail.InitialMeetingDate" asp-format="{0:MM/dd/yyyy}" type="text" name="meeting" readonly class="date-picker form-control text-center" /></td></tr>
                    <tr><td class="small text-center">Signing Deadline</td></tr>
                    <tr><td><input asp-for="ProjectDetail.SigningDeadline" asp-format="{0:MM/dd/yyyy}" type="text" name="deadline" readonly class="date-picker form-control text-center" /></td></tr>
                    <tr><td class="small text-center">Signing Date</td></tr>
                    <tr><td><input asp-for="ProjectDetail.SigningDate" asp-format="{0:MM/dd/yyyy}" type="text" name="signing" readonly class="date-picker form-control text-center" /></td></tr>
                    <tr><td class="small text-center">Mailing Deadline</td></tr>
                    <tr><td><input asp-for="ProjectDetail.MailingDate" asp-format="{0:MM/dd/yyyy}" type="text" name="mailing" readonly class="date-picker form-control text-center" /></td></tr>
                </table>
            </div>
            <div class="col-9 pl-0">
                <div class="accordion" id="task-list">
                    @foreach (var s in Model.ProjectStages)
                    {
                        int complete = Model.ProjectDetail.ProjectTask.Where(t => t.Task.StageId == s.Id).Where(t => t.IsComplete == true).Count();
                        int total = Model.ProjectDetail.ProjectTask.Where(t => t.Task.StageId == s.Id).Count();

                        <h3>
                            <span style="display: inline-block; width: 45%">@(s.Name)</span>
                            <span id="task-completion-@s.Id" style="display: inline-block; width: 48%; text-align: right">@complete of @total completed</span>
                        </h3>
                        <div class="p-0">
                            <table class="table table-sm task-table" width="100%" cellpadding="0">
                                <thead>
                                    <tr class="small">
                                        <th width="24px"></th>
                                        <th width="24px"></th>
                                        <th class="task-name">Task</th>
                                        <th class="task-date">Completed</th>
                                        <th class="task-notes">Notes</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var t in Model.ProjectDetail.ProjectTask.Where(pt => pt.Task.StageId == s.Id))
                                    {
                                        <tr id="table-task-@t.Id">
                                            <td class="table-task-check">
                                                @if (!t.IsComplete)
                                                {
                                                    <span class="far fa-square ml-2"></span>
                                                }
                                                else
                                                {
                                                    <span class="far fa-check-square text-success ml-2"></span>
                                                }
                                            </td>
                                            <td><span class="fas @(t.Task.IsAttorney ? "mj-primary-txt fa-arrow-left" : "mj-secondary-txt fa-arrow-right")"></span></td>
                                            <td>@t.Task.Name</td>
                                            <td class="table-task-date">@(t.CompletionDate.HasValue ? t.CompletionDate.Value.ToString("MMM d") : "")</td>
                                            <td class="table-task-notes small">@t.Notes</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div id="project-activities" class="col-12 col-lg-5 pl-lg-0">
        <div id="activity-list">
            <div class="project-header">
                <h5>Other Activities</h5>
            </div>
            <table id="activity-table" class="table table-striped table-sm dt-responsive" width="100%" cellspacing="0">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Date</th>
                        <th>Activity</th>
                        <th>Notes</th>
                    </tr>
                </thead>
            </table>
        </div>
        <div id="project-notes">
            <div class="project-header"><h5>Notes</h5></div>
            <textarea asp-for="ProjectDetail.Notes" name="notes" readonly class="form-control" rows="5"></textarea>
        </div>
    </div>
</div>
<div id="pop-docs" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <table id="document-table" class="table table-striped table-sm dt-responsive" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th width="50px">Type</th>
                            <th>Document</th>
                            <th width="100px">Number</th>
                            <th width="100px">Author</th>
                            <th width="100px">Last Edit</th>
                        </tr>
                    </thead>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary mj-primary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<script>
    $(document).ready(function () {
        $("#activity-table").DataTable({
            "processing": true,
            "serverSide": true,
            "searching": false,
            "ordering": false,
            "scrollY": "206px",
            "scrollCollapse": true,
            "paging": false,
            "info": false,
            "ajax": {
                "url": "/PEP/PEP/LoadActivities",
                "type": "POST",
                "data": function (d) { d.activityId = @(Model.ProjectDetail.Id); }
            },
            "columnDefs": [{
                "targets": [0],
                "visible": false,
                "searchable": false
            }],
            "columns": [
                { "data": "id", "name": "Id", "autoWidth": true },
                { "data": "date", "name": "Date", "width": "15%" },
                { "data": "code", "name": "Activity", "width": "20%" },
                { "data": "notes", "name": "Notes", "width": "65%" }
            ]
        });

        $("#document-table").DataTable({
            "processing": true,
            "serverSide": false,
            "searching": false,
            "ordering": false,
            "scrollY": "500px",
            "scrollCollapse": true,
            "paging": true,
            "info": false,
            "dom": "rtlip",
            "ajax": {
                "url": 'http://gr-hand-01:56789/HandshakeWebServices/Odata/Odata.ashx/VwDocument2',
                "contentType": 'application/json; charset=utf-8',
                "type": 'GET',
                "dataType": 'jsonp',
                "data": {
                    $select: 'docname,docnum,appicon,author,editwhen',
                    hsf: "@@C1Alias='@Model.ProjectDetail.Cmim.ClientId' AND C2Alias='@Model.ProjectDetail.Cmim.MatterId'",
                    hsInfo: 'all',
                    hso: "editwhen+desc"
                },
                "dataSrc": "d.results",
                jsonp: '$callback'
            },
            "columnDefs": [{
                "targets": [0, 2, 3, 4],
                "className": "dt-center"
            }],
            "columns": [
                {
                    "data": "appicon", "name": "Type", "width": "50px",
                    "render": function (d, t, r) {
                        return '<img src="http://intranet.millerjohnson.com/_catalogs/masterpage/mjdesign/images/' + d + '">';
                    }
                },
                {
                    "data": "docname", "name": "Document", "autoWidth": true,
                    "render": function (d, t, r) {
                        return '<a href="iwl:dms=mjsciman&lib=mj_dms&num=' + r.docnum + '&ver=1&latest=1&command=viewcmd">' + d + '</a>';
                    }
                },
                { "data": "docnum", "name": "Number", "width": "100px" },
                { "data": "author", "name": "Author", "width": "100px" },
                {
                    "data": "editwhen", "name": "Last Edit", "width": "100px",
                    "render": function (d, t, r) {
                        return (new Date(parseInt(d.substr(6)))).toLocaleDateString();
                    }
                }
            ]
        });

        var mychart = $("#mychart");
        var ctr = new Chart(mychart, {
            type: "doughnut",
            data: {
                datasets: [{
                    data: [@Model.BilledAmount, @Model.ProjectDetail.Billing.UnbilledTotal, @Model.BudgetOverrun, @Model.RemainingBudget],
                    backgroundColor: [
                        '#f2c413',
                        '#666',
                        '#cc0000',
                        '#00743f'
                    ]
                }],
                labels: ["Billed", "Unbilled", "Overage", "Remaining"]
            },
            options: {
                cutoutPercentage: 85,
                legend: { display: false },
                animation: {
                    onProgress: function (animation) {
                        var width = this.chart.width;
                        var height = this.chart.height;
                        var ctx = this.chart.canvas.getContext('2d', { alpha: false });
                        var fontSize = (height / 114).toFixed(2);
                        var textX = Math.round(width / 2);
                        var textY = height / 2;
                        var text = this.data.datasets[0].data[2] != 0 ? this.data.datasets[0].data[2].formatMoney(2) : this.data.datasets[0].data[3].formatMoney(2);
                        var text2 = this.data.datasets[0].data[2] != 0 ? "over" : "remaining";

                        ctx.restore();
                        ctx.font = fontSize + "em 'Segoe UI'";
                        ctx.textBaseline = "middle";
                        ctx.textAlign = "center";
                        ctx.fillStyle = this.data.datasets[0].data[2] != 0 ? this.data.datasets[0].backgroundColor[2] : this.data.datasets[0].backgroundColor[3];
                        ctx.fillText(text, textX, textY - (textY * 0.12));
                        ctx.fillText(text2, textX, textY + (textY * 0.12));
                        ctx.save();
                    }
                },

                onResize: function (chart, size) {
                    var width = this.chart.width;
                    var height = this.chart.height;
                    var ctx = this.chart.canvas.getContext('2d', { alpha: false });
                    var fontSize = (height / 114).toFixed(2);
                    var textX = Math.round(width / 2);
                    var textY = height / 2;
                    var text = this.data.datasets[0].data[2] != 0 ? this.data.datasets[0].data[2].formatMoney(2) : this.data.datasets[0].data[3].formatMoney(2);
                    var text2 = this.data.datasets[0].data[2] != 0 ? "over" : "remaining";

                    ctx.restore();
                    ctx.font = fontSize + "em 'Segoe UI'";
                    ctx.textBaseline = "middle";
                    ctx.textAlign = "center";
                    ctx.fillStyle = this.data.datasets[0].data[2] != 0 ? this.data.datasets[0].backgroundColor[2] : this.data.datasets[0].backgroundColor[3];
                    ctx.fillText(text, textX, textY - (textY * 0.12));
                    ctx.fillText(text2, textX, textY + (textY * 0.12));
                    ctx.save();

                }

            }
        });

        $('.accordion').accordion({
            heightStyle: "fill",
            active: getActiveStageIndex()
        });

        $('#pop-docs').on('shown.bs.modal', function (e) {
            $("#document-table").DataTable().columns.adjust();
        });
    });

    function getActiveStageIndex() {
        var index = $("#task-list").find("h3").length;
        var current = 0;

        $("#task-list").find("table").each(function () {
            if ($(this).find(".fa-square").length > 0) {
                if (current < index)
                    index = current;
            }

            current++;
        });

        return index;

    };

    Number.prototype.formatMoney = function (c, d, t) {
        var n = this,
            c = isNaN(c = Math.abs(c)) ? 2 : c,
            d = d == undefined ? "." : d,
            t = t == undefined ? "," : t,
            s = n < 0 ? "-$" : "$",
            i = String(parseInt(n = Math.abs(Number(n) || 0).toFixed(c))),
            j = (j = i.length) > 3 ? j % 3 : 0;
        return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
    };
</script>
